{"/home/travis/build/npmtest/node-npmtest-torii/test.js":"/* istanbul instrument in package npmtest_torii */\n/*jslint\n    bitwise: true,\n    browser: true,\n    maxerr: 8,\n    maxlen: 96,\n    node: true,\n    nomen: true,\n    regexp: true,\n    stupid: true\n*/\n(function () {\n    'use strict';\n    var local;\n\n\n\n    // run shared js-env code - pre-init\n    (function () {\n        // init local\n        local = {};\n        // init modeJs\n        local.modeJs = (function () {\n            try {\n                return typeof navigator.userAgent === 'string' &&\n                    typeof document.querySelector('body') === 'object' &&\n                    typeof XMLHttpRequest.prototype.open === 'function' &&\n                    'browser';\n            } catch (errorCaughtBrowser) {\n                return module.exports &&\n                    typeof process.versions.node === 'string' &&\n                    typeof require('http').createServer === 'function' &&\n                    'node';\n            }\n        }());\n        // init global\n        local.global = local.modeJs === 'browser'\n            ? window\n            : global;\n        switch (local.modeJs) {\n        // re-init local from window.local\n        case 'browser':\n            local = local.global.utility2.objectSetDefault(\n                local.global.utility2_rollup || local.global.local,\n                local.global.utility2\n            );\n            break;\n        // re-init local from example.js\n        case 'node':\n            local = (local.global.utility2_rollup || require('utility2'))\n                .requireExampleJsFromReadme();\n            break;\n        }\n        // export local\n        local.global.local = local;\n    }());\n\n\n\n    // run shared js-env code - function\n    (function () {\n        return;\n    }());\n    switch (local.modeJs) {\n\n\n\n    // run browser js-env code - function\n    case 'browser':\n        break;\n\n\n\n    // run node js-env code - function\n    case 'node':\n        break;\n    }\n\n\n\n    // run shared js-env code - post-init\n    (function () {\n        return;\n    }());\n    switch (local.modeJs) {\n\n\n\n    // run browser js-env code - post-init\n    case 'browser':\n        local.testCase_browser_nullCase = local.testCase_browser_nullCase || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test browsers's null-case handling-behavior-behavior\n         */\n            onError(null, options);\n        };\n\n        // run tests\n        local.nop(local.modeTest &&\n            document.querySelector('#testRunButton1') &&\n            document.querySelector('#testRunButton1').click());\n        break;\n\n\n\n    // run node js-env code - post-init\n    /* istanbul ignore next */\n    case 'node':\n        local.testCase_buildApidoc_default = local.testCase_buildApidoc_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildApidoc's default handling-behavior-behavior\n         */\n            options = { modulePathList: module.paths };\n            local.buildApidoc(options, onError);\n        };\n\n        local.testCase_buildApp_default = local.testCase_buildApp_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildApp's default handling-behavior-behavior\n         */\n            local.testCase_buildReadme_default(options, local.onErrorThrow);\n            local.testCase_buildLib_default(options, local.onErrorThrow);\n            local.testCase_buildTest_default(options, local.onErrorThrow);\n            local.testCase_buildCustomOrg_default(options, local.onErrorThrow);\n            options = [];\n            local.buildApp(options, onError);\n        };\n\n        local.testCase_buildCustomOrg_default = local.testCase_buildCustomOrg_default ||\n            function (options, onError) {\n            /*\n             * this function will test buildCustomOrg's default handling-behavior\n             */\n                options = {};\n                local.buildCustomOrg(options, onError);\n            };\n\n        local.testCase_buildLib_default = local.testCase_buildLib_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildLib's default handling-behavior\n         */\n            options = {};\n            local.buildLib(options, onError);\n        };\n\n        local.testCase_buildReadme_default = local.testCase_buildReadme_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildReadme's default handling-behavior-behavior\n         */\n            options = {};\n            local.buildReadme(options, onError);\n        };\n\n        local.testCase_buildTest_default = local.testCase_buildTest_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildTest's default handling-behavior\n         */\n            options = {};\n            local.buildTest(options, onError);\n        };\n\n        local.testCase_webpage_default = local.testCase_webpage_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test webpage's default handling-behavior\n         */\n            options = { modeCoverageMerge: true, url: local.serverLocalHost + '?modeTest=1' };\n            local.browserTest(options, onError);\n        };\n\n        // run test-server\n        local.testRunServer(local);\n        break;\n    }\n}());\n","/home/travis/build/npmtest/node-npmtest-torii/lib.npmtest_torii.js":"/* istanbul instrument in package npmtest_torii */\n/*jslint\n    bitwise: true,\n    browser: true,\n    maxerr: 8,\n    maxlen: 96,\n    node: true,\n    nomen: true,\n    regexp: true,\n    stupid: true\n*/\n(function () {\n    'use strict';\n    var local;\n\n\n\n    // run shared js-env code - pre-init\n    (function () {\n        // init local\n        local = {};\n        // init modeJs\n        local.modeJs = (function () {\n            try {\n                return typeof navigator.userAgent === 'string' &&\n                    typeof document.querySelector('body') === 'object' &&\n                    typeof XMLHttpRequest.prototype.open === 'function' &&\n                    'browser';\n            } catch (errorCaughtBrowser) {\n                return module.exports &&\n                    typeof process.versions.node === 'string' &&\n                    typeof require('http').createServer === 'function' &&\n                    'node';\n            }\n        }());\n        // init global\n        local.global = local.modeJs === 'browser'\n            ? window\n            : global;\n        // init utility2_rollup\n        local = local.global.utility2_rollup || local;\n        // init lib\n        local.local = local.npmtest_torii = local;\n        // init exports\n        if (local.modeJs === 'browser') {\n            local.global.utility2_npmtest_torii = local;\n        } else {\n            module.exports = local;\n            module.exports.__dirname = __dirname;\n            module.exports.module = module;\n        }\n    }());\n}());\n","/home/travis/build/npmtest/node-npmtest-torii/example.js":"/*\nexample.js\n\nquickstart example\n\ninstruction\n    1. save this script as example.js\n    2. run the shell command:\n        $ npm install npmtest-torii && PORT=8081 node example.js\n    3. play with the browser-demo on http://127.0.0.1:8081\n*/\n\n\n\n/* istanbul instrument in package npmtest_torii */\n/*jslint\n    bitwise: true,\n    browser: true,\n    maxerr: 8,\n    maxlen: 96,\n    node: true,\n    nomen: true,\n    regexp: true,\n    stupid: true\n*/\n(function () {\n    'use strict';\n    var local;\n\n\n\n    // run shared js-env code - pre-init\n    (function () {\n        // init local\n        local = {};\n        // init modeJs\n        local.modeJs = (function () {\n            try {\n                return typeof navigator.userAgent === 'string' &&\n                    typeof document.querySelector('body') === 'object' &&\n                    typeof XMLHttpRequest.prototype.open === 'function' &&\n                    'browser';\n            } catch (errorCaughtBrowser) {\n                return module.exports &&\n                    typeof process.versions.node === 'string' &&\n                    typeof require('http').createServer === 'function' &&\n                    'node';\n            }\n        }());\n        // init global\n        local.global = local.modeJs === 'browser'\n            ? window\n            : global;\n        // init utility2_rollup\n        local = local.global.utility2_rollup || (local.modeJs === 'browser'\n            ? local.global.utility2_npmtest_torii\n            : global.utility2_moduleExports);\n        // export local\n        local.global.local = local;\n    }());\n    switch (local.modeJs) {\n\n\n\n    // post-init\n    // run browser js-env code - post-init\n    /* istanbul ignore next */\n    case 'browser':\n        local.testRunBrowser = function (event) {\n            if (!event || (event &&\n                    event.currentTarget &&\n                    event.currentTarget.className &&\n                    event.currentTarget.className.includes &&\n                    event.currentTarget.className.includes('onreset'))) {\n                // reset output\n                Array.from(\n                    document.querySelectorAll('body > .resettable')\n                ).forEach(function (element) {\n                    switch (element.tagName) {\n                    case 'INPUT':\n                    case 'TEXTAREA':\n                        element.value = '';\n                        break;\n                    default:\n                        element.textContent = '';\n                    }\n                });\n            }\n            switch (event && event.currentTarget && event.currentTarget.id) {\n            case 'testRunButton1':\n                // show tests\n                if (document.querySelector('#testReportDiv1').style.display === 'none') {\n                    document.querySelector('#testReportDiv1').style.display = 'block';\n                    document.querySelector('#testRunButton1').textContent =\n                        'hide internal test';\n                    local.modeTest = true;\n                    local.testRunDefault(local);\n                // hide tests\n                } else {\n                    document.querySelector('#testReportDiv1').style.display = 'none';\n                    document.querySelector('#testRunButton1').textContent = 'run internal test';\n                }\n                break;\n            // custom-case\n            default:\n                break;\n            }\n            if (document.querySelector('#inputTextareaEval1') && (!event || (event &&\n                    event.currentTarget &&\n                    event.currentTarget.className &&\n                    event.currentTarget.className.includes &&\n                    event.currentTarget.className.includes('oneval')))) {\n                // try to eval input-code\n                try {\n                    /*jslint evil: true*/\n                    eval(document.querySelector('#inputTextareaEval1').value);\n                } catch (errorCaught) {\n                    console.error(errorCaught);\n                }\n            }\n        };\n        // log stderr and stdout to #outputTextareaStdout1\n        ['error', 'log'].forEach(function (key) {\n            console[key + '_original'] = console[key];\n            console[key] = function () {\n                var element;\n                console[key + '_original'].apply(console, arguments);\n                element = document.querySelector('#outputTextareaStdout1');\n                if (!element) {\n                    return;\n                }\n                // append text to #outputTextareaStdout1\n                element.value += Array.from(arguments).map(function (arg) {\n                    return typeof arg === 'string'\n                        ? arg\n                        : JSON.stringify(arg, null, 4);\n                }).join(' ') + '\\n';\n                // scroll textarea to bottom\n                element.scrollTop = element.scrollHeight;\n            };\n        });\n        // init event-handling\n        ['change', 'click', 'keyup'].forEach(function (event) {\n            Array.from(document.querySelectorAll('.on' + event)).forEach(function (element) {\n                element.addEventListener(event, local.testRunBrowser);\n            });\n        });\n        // run tests\n        local.testRunBrowser();\n        break;\n\n\n\n    // run node js-env code - post-init\n    /* istanbul ignore next */\n    case 'node':\n        // export local\n        module.exports = local;\n        // require modules\n        local.fs = require('fs');\n        local.http = require('http');\n        local.url = require('url');\n        // init assets\n        local.assetsDict = local.assetsDict || {};\n        /* jslint-ignore-begin */\n        local.assetsDict['/assets.index.template.html'] = '\\\n<!doctype html>\\n\\\n<html lang=\"en\">\\n\\\n<head>\\n\\\n<meta charset=\"UTF-8\">\\n\\\n<meta name=\"viewport\" content=\"width=device-width, initial-scale=1\">\\n\\\n<title>{{env.npm_package_name}} (v{{env.npm_package_version}})</title>\\n\\\n<style>\\n\\\n/*csslint\\n\\\n    box-sizing: false,\\n\\\n    universal-selector: false\\n\\\n*/\\n\\\n* {\\n\\\n    box-sizing: border-box;\\n\\\n}\\n\\\nbody {\\n\\\n    background: #dde;\\n\\\n    font-family: Arial, Helvetica, sans-serif;\\n\\\n    margin: 2rem;\\n\\\n}\\n\\\nbody > * {\\n\\\n    margin-bottom: 1rem;\\n\\\n}\\n\\\n.utility2FooterDiv {\\n\\\n    margin-top: 20px;\\n\\\n    text-align: center;\\n\\\n}\\n\\\n</style>\\n\\\n<style>\\n\\\n/*csslint\\n\\\n*/\\n\\\ntextarea {\\n\\\n    font-family: monospace;\\n\\\n    height: 10rem;\\n\\\n    width: 100%;\\n\\\n}\\n\\\ntextarea[readonly] {\\n\\\n    background: #ddd;\\n\\\n}\\n\\\n</style>\\n\\\n</head>\\n\\\n<body>\\n\\\n<!-- utility2-comment\\n\\\n<div id=\"ajaxProgressDiv1\" style=\"background: #d00; height: 2px; left: 0; margin: 0; padding: 0; position: fixed; top: 0; transition: background 0.5s, width 1.5s; width: 25%;\"></div>\\n\\\nutility2-comment -->\\n\\\n<h1>\\n\\\n<!-- utility2-comment\\n\\\n    <a\\n\\\n        {{#if env.npm_package_homepage}}\\n\\\n        href=\"{{env.npm_package_homepage}}\"\\n\\\n        {{/if env.npm_package_homepage}}\\n\\\n        target=\"_blank\"\\n\\\n    >\\n\\\nutility2-comment -->\\n\\\n        {{env.npm_package_name}} (v{{env.npm_package_version}})\\n\\\n<!-- utility2-comment\\n\\\n    </a>\\n\\\nutility2-comment -->\\n\\\n</h1>\\n\\\n<h3>{{env.npm_package_description}}</h3>\\n\\\n<!-- utility2-comment\\n\\\n<h4><a download href=\"assets.app.js\">download standalone app</a></h4>\\n\\\n<button class=\"onclick onreset\" id=\"testRunButton1\">run internal test</button><br>\\n\\\n<div id=\"testReportDiv1\" style=\"display: none;\"></div>\\n\\\nutility2-comment -->\\n\\\n\\n\\\n\\n\\\n\\n\\\n<label>stderr and stdout</label>\\n\\\n<textarea class=\"resettable\" id=\"outputTextareaStdout1\" readonly></textarea>\\n\\\n<!-- utility2-comment\\n\\\n{{#if isRollup}}\\n\\\n<script src=\"assets.app.js\"></script>\\n\\\n{{#unless isRollup}}\\n\\\nutility2-comment -->\\n\\\n<script src=\"assets.utility2.rollup.js\"></script>\\n\\\n<script src=\"jsonp.utility2._stateInit?callback=window.utility2._stateInit\"></script>\\n\\\n<script src=\"assets.npmtest_torii.rollup.js\"></script>\\n\\\n<script src=\"assets.example.js\"></script>\\n\\\n<script src=\"assets.test.js\"></script>\\n\\\n<!-- utility2-comment\\n\\\n{{/if isRollup}}\\n\\\nutility2-comment -->\\n\\\n<div class=\"utility2FooterDiv\">\\n\\\n    [ this app was created with\\n\\\n    <a href=\"https://github.com/kaizhu256/node-utility2\" target=\"_blank\">utility2</a>\\n\\\n    ]\\n\\\n</div>\\n\\\n</body>\\n\\\n</html>\\n\\\n';\n        /* jslint-ignore-end */\n        if (local.templateRender) {\n            local.assetsDict['/'] = local.templateRender(\n                local.assetsDict['/assets.index.template.html'],\n                {\n                    env: local.objectSetDefault(local.env, {\n                        npm_package_description: 'the greatest app in the world!',\n                        npm_package_name: 'my-app',\n                        npm_package_nameAlias: 'my_app',\n                        npm_package_version: '0.0.1'\n                    })\n                }\n            );\n        } else {\n            local.assetsDict['/'] = local.assetsDict['/assets.index.template.html']\n                .replace((/\\{\\{env\\.(\\w+?)\\}\\}/g), function (match0, match1) {\n                    // jslint-hack\n                    String(match0);\n                    switch (match1) {\n                    case 'npm_package_description':\n                        return 'the greatest app in the world!';\n                    case 'npm_package_name':\n                        return 'my-app';\n                    case 'npm_package_nameAlias':\n                        return 'my_app';\n                    case 'npm_package_version':\n                        return '0.0.1';\n                    }\n                });\n        }\n        // run the cli\n        if (local.global.utility2_rollup || module !== require.main) {\n            break;\n        }\n        local.assetsDict['/assets.example.js'] =\n            local.assetsDict['/assets.example.js'] ||\n            local.fs.readFileSync(__filename, 'utf8');\n        // bug-workaround - long $npm_package_buildCustomOrg\n        /* jslint-ignore-begin */\n        local.assetsDict['/assets.npmtest_torii.rollup.js'] =\n            local.assetsDict['/assets.npmtest_torii.rollup.js'] ||\n            local.fs.readFileSync(\n                local.npmtest_torii.__dirname + '/lib.npmtest_torii.js',\n                'utf8'\n            ).replace((/^#!/), '//');\n        /* jslint-ignore-end */\n        local.assetsDict['/favicon.ico'] = local.assetsDict['/favicon.ico'] || '';\n        // if $npm_config_timeout_exit exists,\n        // then exit this process after $npm_config_timeout_exit ms\n        if (Number(process.env.npm_config_timeout_exit)) {\n            setTimeout(process.exit, Number(process.env.npm_config_timeout_exit));\n        }\n        // start server\n        if (local.global.utility2_serverHttp1) {\n            break;\n        }\n        process.env.PORT = process.env.PORT || '8081';\n        console.error('server starting on port ' + process.env.PORT);\n        local.http.createServer(function (request, response) {\n            request.urlParsed = local.url.parse(request.url);\n            if (local.assetsDict[request.urlParsed.pathname] !== undefined) {\n                response.end(local.assetsDict[request.urlParsed.pathname]);\n                return;\n            }\n            response.statusCode = 404;\n            response.end();\n        }).listen(process.env.PORT);\n        break;\n    }\n}());\n","/home/travis/build/npmtest/node-npmtest-torii/node_modules/torii/index.js":"/* jshint node: true */\n'use strict';\n\nmodule.exports = {\n  name: 'torii',\n  included: function(app) {\n    var hostApp = this._findApp(app);\n    var toriiConfig = hostApp.project.config(app.env)['torii'];\n    if (!toriiConfig) {\n      console.warn('Torii is installed but not configured in config/environment.js!');\n    }\n\n    this._super.included(app);\n  },\n\n  _findApp: function(hostApp) {\n    var app = this.app || hostApp;\n    while (app.app) {\n      app = app.app;\n    }\n    return app;\n  }\n};\n","/home/travis/build/npmtest/node-npmtest-torii/node_modules/torii/addon/configuration.js":"var get = Ember.get;\n\nconst NAMESPACE = 'providers';\nlet configuration = {};\n\nfunction configurable(configKey, defaultValue){\n  return Ember.computed(function configurableComputed(){\n    // Trigger super wrapping in Ember 2.1.\n    // See: https://github.com/emberjs/ember.js/pull/12359\n    this._super = this._super || (function(){ throw new Error('should always have _super'); })();\n    var configNamespace = NAMESPACE + '.' + this.get('name');\n    var propertyPath = configNamespace + '.' + configKey;\n    let configuration = getConfiguration();\n    var value = get(configuration, propertyPath);\n\n    if (typeof value === 'undefined') {\n      if (typeof defaultValue !== 'undefined') {\n        if (typeof defaultValue === 'function') {\n          return defaultValue.call(this);\n        } else {\n          return defaultValue;\n        }\n      } else {\n        throw new Error(\"Expected configuration value \"+configKey+\" to be defined for provider named \" + this.get(\"name\"));\n      }\n    }\n    return value;\n  });\n}\n\nfunction configure(settings) {\n  configuration = settings;\n}\n\nfunction getConfiguration() {\n  return configuration;\n}\n\nexport {configurable, configure, getConfiguration};\n\nexport default {};\n","/home/travis/build/npmtest/node-npmtest-torii/node_modules/torii/addon/load-initializers.js":"import loadInitializer from 'torii/lib/load-initializer';\nimport loadInstanceInitializer from 'torii/lib/load-instance-initializer';\nimport initializeTorii from 'torii/initializers/initialize-torii';\nimport initializeToriiCallback from 'torii/initializers/initialize-torii-callback';\nimport initializeToriiSession from 'torii/initializers/initialize-torii-session';\nimport setupRoutes from 'torii/instance-initializers/setup-routes';\nimport walkProviders from 'torii/instance-initializers/walk-providers';\n\nexport default function(){\n  loadInitializer(initializeToriiCallback);\n  loadInitializer(initializeTorii);\n  loadInitializer(initializeToriiSession);\n  loadInstanceInitializer(walkProviders);\n  loadInstanceInitializer(setupRoutes);\n}\n","/home/travis/build/npmtest/node-npmtest-torii/node_modules/torii/addon/redirect-handler.js":"/**\n * RedirectHandler will attempt to find\n * these keys in the URL. If found,\n * this is an indication to Torii that\n * the Ember app has loaded inside a popup\n * and should postMessage this data to window.opener\n */\n\nimport PopupIdSerializer from \"./lib/popup-id-serializer\";\nimport { CURRENT_REQUEST_KEY } from \"./mixins/ui-service-mixin\";\nimport configuration from 'torii/configuration';\n\nvar RedirectHandler = Ember.Object.extend({\n\n  run: function(){\n    var windowObject = this.windowObject;\n\n    return new Ember.RSVP.Promise(function(resolve, reject){\n      var pendingRequestKey = windowObject.localStorage.getItem(CURRENT_REQUEST_KEY);\n      windowObject.localStorage.removeItem(CURRENT_REQUEST_KEY);\n      if (pendingRequestKey) {\n        var url = windowObject.location.toString();\n        windowObject.localStorage.setItem(pendingRequestKey, url);\n\n        var remoteServiceName = configuration.remoteServiceName || 'popup';\n        if(remoteServiceName === 'popup'){\n          // NOTE : If a single provider has been configured to use the 'iframe'\n          // service, this next line will still be called. It will just fail silently.\n          windowObject.close();\n        }\n      } else{\n        reject('Not a torii popup');\n      }\n    });\n  }\n\n});\n\nRedirectHandler.reopenClass({\n  // untested\n  handle: function(windowObject){\n    var handler = RedirectHandler.create({windowObject: windowObject});\n    return handler.run();\n  }\n});\n\nexport default RedirectHandler;\n","/home/travis/build/npmtest/node-npmtest-torii/node_modules/torii/addon/router-dsl-ext.js":"var Router = Ember.Router;\nvar proto = Ember.RouterDSL.prototype;\n\nvar currentMap = null;\n\nproto.authenticatedRoute = function() {\n  this.route.apply(this, arguments);\n  currentMap.push(arguments[0]);\n};\n\nRouter.reopen({\n  _initRouterJs: function() {\n    currentMap = [];\n    this._super.apply(this, arguments);\n    this.router.authenticatedRoutes = currentMap;\n  }\n});\n","/home/travis/build/npmtest/node-npmtest-torii/node_modules/torii/addon/adapters/application.js":"var ApplicationAdapter = Ember.Object.extend({\n\n  open: function(){\n    return new Ember.RSVP.Promise(function(){\n      throw new Error(\n        'The Torii adapter must implement `open` for a session to be opened');\n    });\n  },\n\n  fetch: function(){\n    return new Ember.RSVP.Promise(function(){\n      throw new Error(\n        'The Torii adapter must implement `fetch` for a session to be fetched');\n    });\n  },\n\n  close: function(){\n    return new Ember.RSVP.Promise(function(){\n      throw new Error(\n        'The Torii adapter must implement `close` for a session to be closed');\n    });\n  }\n\n});\n\nexport default ApplicationAdapter;\n","/home/travis/build/npmtest/node-npmtest-torii/node_modules/torii/addon/bootstrap/routing.js":"import ApplicationRouteMixin from 'torii/routing/application-route-mixin';\nimport AuthenticatedRouteMixin from 'torii/routing/authenticated-route-mixin';\nimport { lookup, lookupFactory, register } from 'torii/lib/container-utils';\n\nvar AuthenticatedRoute = null;\n\nfunction reopenOrRegister(applicationInstance, factoryName, mixin) {\n  var factory = lookup(applicationInstance, factoryName);\n  var basicFactory;\n\n  if (factory) {\n    factory.reopen(mixin);\n  } else {\n    basicFactory = lookupFactory(applicationInstance, 'route:basic');\n    if (!AuthenticatedRoute) {\n      AuthenticatedRoute = basicFactory.extend(AuthenticatedRouteMixin);\n    }\n    register(applicationInstance, factoryName, AuthenticatedRoute);\n  }\n}\n\nexport default function(applicationInstance, authenticatedRoutes){\n  reopenOrRegister(applicationInstance, 'route:application', ApplicationRouteMixin);\n  for (var i = 0; i < authenticatedRoutes.length; i++) {\n    var routeName = authenticatedRoutes[i];\n    var factoryName = 'route:' + routeName;\n    reopenOrRegister(applicationInstance, factoryName, AuthenticatedRouteMixin);\n  }\n}\n","/home/travis/build/npmtest/node-npmtest-torii/node_modules/torii/addon/bootstrap/session.js":"import ToriiSessionService from 'torii/services/torii-session';\n\nexport default function(application, sessionName){\n  var sessionFactoryName = 'service:' + sessionName;\n  application.register(sessionFactoryName, ToriiSessionService);\n  application.inject(sessionFactoryName, 'torii', 'service:torii');\n  application.inject('route',      sessionName, sessionFactoryName);\n  application.inject('controller', sessionName, sessionFactoryName);\n}\n","/home/travis/build/npmtest/node-npmtest-torii/node_modules/torii/addon/bootstrap/torii.js":"import LinkedInOauth2Provider from 'torii/providers/linked-in-oauth2';\nimport GoogleOauth2Provider from 'torii/providers/google-oauth2';\nimport GoogleOauth2BearerProvider from 'torii/providers/google-oauth2-bearer';\nimport FacebookConnectProvider from 'torii/providers/facebook-connect';\nimport FacebookOauth2Provider from 'torii/providers/facebook-oauth2';\nimport ApplicationAdapter from 'torii/adapters/application';\nimport TwitterProvider from 'torii/providers/twitter-oauth1';\nimport GithubOauth2Provider from 'torii/providers/github-oauth2';\nimport AzureAdOauth2Provider from 'torii/providers/azure-ad-oauth2';\nimport StripeConnectProvider from 'torii/providers/stripe-connect';\nimport EdmodoConnectProvider from 'torii/providers/edmodo-connect';\nimport configuration from 'torii/configuration';\n\nimport ToriiService from 'torii/services/torii';\nimport PopupService from 'torii/services/popup';\nimport IframeService from 'torii/services/iframe';\n\nimport { hasRegistration } from 'torii/lib/container-utils';\n\nexport default function(application) {\n  application.register('service:torii', ToriiService);\n\n  application.register('torii-provider:linked-in-oauth2', LinkedInOauth2Provider);\n  application.register('torii-provider:google-oauth2', GoogleOauth2Provider);\n  application.register('torii-provider:google-oauth2-bearer', GoogleOauth2BearerProvider);\n  application.register('torii-provider:facebook-connect', FacebookConnectProvider);\n  application.register('torii-provider:facebook-oauth2', FacebookOauth2Provider);\n  application.register('torii-provider:twitter', TwitterProvider);\n  application.register('torii-provider:github-oauth2', GithubOauth2Provider);\n  application.register('torii-provider:azure-ad-oauth2', AzureAdOauth2Provider);\n  application.register('torii-provider:stripe-connect', StripeConnectProvider);\n  application.register('torii-provider:edmodo-connect', EdmodoConnectProvider);\n  application.register('torii-adapter:application', ApplicationAdapter);\n\n  application.register('torii-service:iframe', IframeService);\n  application.register('torii-service:popup', PopupService);\n}\n","/home/travis/build/npmtest/node-npmtest-torii/node_modules/torii/addon/components/torii-iframe-placeholder.js":"import Ember from 'ember';\n\nexport default Ember.Component.extend({\n  classNames: ['torii-iframe-placeholder']\n});\n","/home/travis/build/npmtest/node-npmtest-torii/node_modules/torii/addon/lib/container-utils.js":"export function hasRegistration(application, name) {\n  if (application && application.hasRegistration) {\n    return application.hasRegistration(name);\n  } else {\n    return application.registry.has(name);\n  }\n}\n\nexport function register(applicationInstance, name, factory) {\n  if (applicationInstance && applicationInstance.application) {\n    return applicationInstance.application.register(name, factory);\n  } else {\n    return applicationInstance.registry.register(name, factory);\n  }\n}\n\nexport function lookupFactory(applicationInstance, name) {\n  if (applicationInstance && applicationInstance.lookupFactory) {\n    return applicationInstance.lookupFactory(name);\n  } else if (applicationInstance && applicationInstance.application) {\n    return applicationInstance.application.__container__.lookupFactory(name);\n  } else {\n    return applicationInstance.container.lookupFactory(name);\n  }\n}\n\nexport function lookup(applicationInstance, name) {\n  if (applicationInstance && applicationInstance.lookup) {\n    return applicationInstance.lookup(name);\n  } else if (applicationInstance && applicationInstance.application) {\n    return applicationInstance.application.__container__.lookup(name);\n  } else {\n    return applicationInstance.container.lookup(name);\n  }\n}\n\nexport function getOwner(instance) {\n  if (Ember.getOwner) {\n    return Ember.getOwner(instance);\n  } else {\n    return instance.container;\n  }\n}\n","/home/travis/build/npmtest/node-npmtest-torii/node_modules/torii/addon/lib/load-initializer.js":"/* global Ember */\nexport default function(initializer){\n  Ember.onLoad('Ember.Application', function(Application){\n    Application.initializer(initializer);\n  });\n}\n","/home/travis/build/npmtest/node-npmtest-torii/node_modules/torii/addon/lib/load-instance-initializer.js":"/* global Ember */\nexport default function(instanceInitializer){\n  Ember.onLoad('Ember.Application', function(Application){\n    Application.instanceInitializer(instanceInitializer);\n  });\n}\n","/home/travis/build/npmtest/node-npmtest-torii/node_modules/torii/addon/lib/parse-query-string.js":"export default Ember.Object.extend({\n  init: function() {\n    this.validKeys = this.keys;\n  },\n\n  parse: function(){\n    var url       = this.url,\n        validKeys = this.validKeys,\n        data      = {};\n\n    for (var i = 0; i < validKeys.length; i++) {\n      var key = validKeys[i],\n          regex = new RegExp(key + \"=([^&#]*)\"),\n          match = regex.exec(url);\n      if (match) {\n        data[key] = match[1];\n      }\n    }\n    return data;\n  }\n});\n","/home/travis/build/npmtest/node-npmtest-torii/node_modules/torii/addon/lib/popup-id-serializer.js":"var PopupIdSerializer = {\n  serialize: function(popupId){\n    return \"torii-popup:\" + popupId;\n  },\n\n  deserialize: function(serializedPopupId){\n    if (!serializedPopupId){\n      return null;\n    }\n\n    var match = serializedPopupId.match(/^(torii-popup:)(.*)/);\n    return match ? match[2] : null;\n  },\n};\n\n\nexport default PopupIdSerializer;\n","/home/travis/build/npmtest/node-npmtest-torii/node_modules/torii/addon/lib/query-string.js":"var camelize = Ember.String.camelize,\n    get      = Ember.get;\n\nfunction isValue(value){\n  return (value || value === false);\n}\n\nfunction getParamValue(obj, paramName, optional){\n  var camelizedName = camelize(paramName),\n      value         = get(obj, camelizedName);\n\n  if (!optional) {\n    if ( !isValue(value) && isValue(get(obj, paramName))) {\n      throw new Error(\n        'Use camelized versions of url params. (Did not find ' +\n        '\"' + camelizedName + '\" property but did find ' +\n        '\"' + paramName + '\".');\n    }\n\n    if (!isValue(value)) {\n      throw new Error(\n        'Missing url param: \"'+paramName+'\". (Looked for: property named \"' +\n        camelizedName + '\".'\n      );\n    }\n  }\n\n  return isValue(value) ? encodeURIComponent(value) : undefined;\n}\n\nfunction getOptionalParamValue(obj, paramName){\n  return getParamValue(obj, paramName, true);\n}\n\nexport default Ember.Object.extend({\n  init: function() {\n    this.obj               = this.provider;\n    this.urlParams         = Ember.A(this.requiredParams.slice()).uniq();\n    this.optionalUrlParams = Ember.A(this.optionalParams ? this.optionalParams.slice() : []).uniq();\n\n    this.optionalUrlParams.forEach(function(param){\n      if (this.urlParams.indexOf(param) > -1) {\n        throw new Error(\"Required parameters cannot also be optional: '\" + param + \"'\");\n      }\n    }, this);\n  },\n\n  toString: function() {\n    var urlParams         = this.urlParams,\n        optionalUrlParams = this.optionalUrlParams,\n        obj               = this.obj,\n        keyValuePairs     = Ember.A([]);\n\n    urlParams.forEach(function(paramName){\n      var paramValue = getParamValue(obj, paramName);\n\n      keyValuePairs.push( [paramName, paramValue] );\n    });\n\n    optionalUrlParams.forEach(function(paramName){\n      var paramValue = getOptionalParamValue(obj, paramName);\n\n      if (isValue(paramValue)) {\n        keyValuePairs.push( [paramName, paramValue] );\n      }\n    });\n\n    return keyValuePairs.map(function(pair){\n      return pair.join('=');\n    }).join('&');\n  }\n});\n","/home/travis/build/npmtest/node-npmtest-torii/node_modules/torii/addon/lib/random-url-safe.js":"export default function randomUrlSafe(length) {\n  var chars = 'ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789';\n  var result = '';\n\n  for (var i = 0; i < length; i++) {\n    result += chars.charAt(Math.floor(Math.random() * chars.length));\n  }\n\n  return result;\n}\n\n","/home/travis/build/npmtest/node-npmtest-torii/node_modules/torii/addon/lib/required-property.js":"function requiredProperty(){\n  return Ember.computed(function(key){\n    throw new Error(\"Definition of property \"+key+\" by a subclass is required.\");\n  });\n}\n\nexport default requiredProperty;\n","/home/travis/build/npmtest/node-npmtest-torii/node_modules/torii/addon/lib/state-machine.js":"/*\n * Modification of Stefan Penner's StateMachine.js: https://github.com/stefanpenner/state_machine.js/\n *\n * This modification requires Ember.js to be loaded first\n */\n\nvar a_slice = Array.prototype.slice;\nvar o_keys = Object.keys;\n\nfunction makeArray(entry){\n  if (entry.constructor === Array) {\n    return entry;\n  }else if(entry) {\n    return [entry];\n  }else{\n    return [];\n  }\n}\n\nfunction StateMachine(options){\n  var initialState = options.initialState;\n  this.states = options.states;\n\n  if (!this.states) {\n    throw new Error('StateMachine needs states');\n  }\n\n  this.state  = this.states[initialState];\n\n  if (!this.state) {\n    throw new Error('Missing initial state');\n  }\n\n  this.currentStateName = initialState;\n\n  this._subscriptions = {};\n\n  var beforeTransitions = (options.beforeTransitions ||[]);\n  var afterTransitions  = (options.afterTransitions ||[]);\n  var rule;\n\n  var i, length;\n  for(i = 0, length = beforeTransitions.length; length > i; i++){\n    rule = beforeTransitions[i];\n    this.beforeTransition.call(this, rule, rule.fn);\n  }\n\n  for(i = 0, length = afterTransitions.length; length > i; i++){\n    rule = afterTransitions[i];\n    this.afterTransition.call(this, rule, rule.fn);\n  }\n}\n\nvar SPLAT = StateMachine.SPLAT = '*';\n\nStateMachine.transitionTo = function(state){\n  return function(){\n    this.transitionTo(state);\n  };\n};\n\nStateMachine.prototype = {\n  states: {},\n  toString: function(){\n    return \"<StateMachine currentState:'\" + this.currentStateName +\"' >\";\n  },\n\n  transitionTo: function(nextStateName){\n    if (nextStateName.charAt(0) === '.') {\n      var splits = this.currentStateName.split('.').slice(0,-1);\n\n      // maybe all states should have an implicit leading dot (kinda like dns)\n      if (0 < splits.length){\n        nextStateName = splits.join('.') + nextStateName;\n      } else {\n        nextStateName = nextStateName.substring(1);\n      }\n    }\n\n    var state = this.states[nextStateName],\n    stateName = this.currentStateName;\n\n    if (!state) {\n      throw new Error('Unknown State: `' + nextStateName + '`');\n    }\n    this.willTransition(stateName, nextStateName);\n\n    this.state = state;\n\n    this.currentStateName = nextStateName;\n    this.didTransition(stateName, nextStateName);\n  },\n\n  beforeTransition: function(options, fn) {\n    this._transition('willTransition', options, fn);\n  },\n\n  afterTransition: function(options, fn) {\n    this._transition('didTransition', options, fn);\n  },\n\n  _transition: function(event, filter, fn) {\n    var from = filter.from || SPLAT,\n      to = filter.to || SPLAT,\n      context = this,\n      matchingTo, matchingFrom,\n      toSplatOffset, fromSplatOffset,\n      negatedMatchingTo, negatedMatchingFrom;\n\n    if (to.indexOf('!') === 0) {\n      matchingTo = to.substr(1);\n      negatedMatchingTo = true;\n    } else {\n      matchingTo = to;\n      negatedMatchingTo = false;\n    }\n\n    if (from.indexOf('!') === 0) {\n      matchingFrom = from.substr(1);\n      negatedMatchingFrom = true;\n    } else {\n      matchingFrom = from;\n      negatedMatchingFrom = false;\n    }\n\n    fromSplatOffset = matchingFrom.indexOf(SPLAT);\n    toSplatOffset = matchingTo.indexOf(SPLAT);\n\n    if (fromSplatOffset >= 0) {\n      matchingFrom = matchingFrom.substring(fromSplatOffset, 0);\n    }\n\n    if (toSplatOffset >= 0) {\n      matchingTo = matchingTo.substring(toSplatOffset, 0);\n    }\n\n    this.on(event, function(currentFrom, currentTo) {\n      var currentMatcherTo = currentTo,\n        currentMatcherFrom = currentFrom,\n        toMatches, fromMatches;\n\n      if (fromSplatOffset >= 0){\n        currentMatcherFrom = currentFrom.substring(fromSplatOffset, 0);\n      }\n\n      if (toSplatOffset >= 0){\n        currentMatcherTo = currentTo.substring(toSplatOffset, 0);\n      }\n\n      toMatches = (currentMatcherTo === matchingTo) !== negatedMatchingTo;\n      fromMatches = (currentMatcherFrom === matchingFrom) !== negatedMatchingFrom;\n\n      if (toMatches && fromMatches) {\n        fn.call(this, currentFrom, currentTo);\n      }\n    });\n  },\n\n  willTransition: function(from, to) {\n    this._notify('willTransition', from, to);\n  },\n\n  didTransition: function(from, to) {\n    this._notify('didTransition', from, to);\n  },\n\n  _notify: function(name, from, to) {\n    var subscriptions = (this._subscriptions[name] || []);\n\n    for( var i = 0, length = subscriptions.length; i < length; i++){\n      subscriptions[i].call(this, from, to);\n    }\n  },\n\n  on: function(event, fn) {\n    this._subscriptions[event] = this._subscriptions[event] || [];\n    this._subscriptions[event].push(fn);\n  },\n\n  off: function(event, fn) {\n    var idx = this._subscriptions[event].indexOf(fn);\n\n    if (fn){\n      if (idx) {\n        this._subscriptions[event].splice(idx, 1);\n      }\n    }else {\n      this._subscriptions[event] = null;\n    }\n  },\n\n  send: function(eventName) {\n    var event = this.state[eventName];\n    var args = a_slice.call(arguments, 1);\n\n    if (event) {\n      return event.apply(this, args);\n    } else {\n      this.unhandledEvent(eventName);\n    }\n  },\n\n  trySend: function(eventName) {\n    var event = this.state[eventName];\n    var args = a_slice.call(arguments,1);\n\n    if (event) {\n      return event.apply(this, args);\n    }\n  },\n\n  event: function(eventName, callback){\n    var states = this.states;\n\n    var eventApi = {\n      transition: function() {\n        var length = arguments.length,\n        first = arguments[0],\n        second = arguments[1],\n        events = normalizeEvents(eventName, first, second);\n\n        o_keys(events).forEach(function(from){\n          var to = events[from];\n          compileEvent(states, eventName, from, to, StateMachine.transitionTo(to));\n        });\n      }\n    };\n\n    callback.call(eventApi);\n  },\n\n  unhandledEvent: function(event){\n    var currentStateName = this.currentStateName,\n    message = \"Unknown Event: `\" + event + \"` for: \" + this.toString();\n\n    throw new Error(message);\n  }\n};\n\nfunction normalizeEvents(eventName, first, second){\n  var events;\n  if (!first) { throw new Error('invalid Transition'); }\n\n  if (second) {\n    var froms = first, to = second;\n    events = expandArrayEvents(froms, to);\n  } else {\n    if (first.constructor === Object) {\n      events = first;\n    } else {\n      throw new Error('something went wrong');\n    }\n  }\n\n  return events;\n}\n\nfunction expandArrayEvents(froms, to){\n  return  makeArray(froms).reduce(function(events, from){\n     events[from] = to;\n     return events;\n   }, {});\n}\n\nfunction compileEvent(states, eventName, from, to, fn){\n  var state = states[from];\n\n  if (from && to && state) {\n    states[from][eventName] = fn;\n  } else {\n    var message = \"invalid transition state: \" + (state && state.currentStateName) + \" from: \" + from+ \" to: \" + to ;\n    throw new Error(message);\n  }\n}\n\nexport default StateMachine;\n","/home/travis/build/npmtest/node-npmtest-torii/node_modules/torii/addon/lib/uuid-generator.js":"var UUIDGenerator = {\n  generate: function() {\n    var d = new Date().getTime();\n    var uuid = 'xxxxxxxx-xxxx-4xxx-yxxx-xxxxxxxxxxxx'.replace(/[xy]/g, function(c) {\n      var r = (d + Math.random()*16)%16 | 0;\n      d = Math.floor(d/16);\n      return (c==='x' ? r : (r&0x3|0x8)).toString(16);\n    });\n    return uuid;\n  },\n\n\n};\n\nexport default UUIDGenerator;\n","/home/travis/build/npmtest/node-npmtest-torii/node_modules/torii/addon/mixins/ui-service-mixin.js":"import UUIDGenerator from 'torii/lib/uuid-generator';\nimport PopupIdSerializer from 'torii/lib/popup-id-serializer';\nimport ParseQueryString from 'torii/lib/parse-query-string';\nexport var CURRENT_REQUEST_KEY = '__torii_request';\n\nvar on = Ember.on;\n\nfunction parseMessage(url, keys){\n  var parser = ParseQueryString.create({url: url, keys: keys});\n  var data = parser.parse();\n  return data;\n}\n\nvar ServicesMixin = Ember.Mixin.create({\n\n  init: function(){\n    this._super.apply(this, arguments);\n    this.remoteIdGenerator = this.remoteIdGenerator || UUIDGenerator;\n  },\n\n  // Open a remote window. Returns a promise that resolves or rejects\n  // accoring to if the iframe is redirected with arguments in the URL.\n  //\n  // For example, an OAuth2 request:\n  //\n  // iframe.open('http://some-oauth.com', ['code']).then(function(data){\n  //   // resolves with data.code, as from http://app.com?code=13124\n  // });\n  //\n  // Services that use this mixin should implement openRemote\n  //\n  open: function(url, keys, options){\n    var service   = this,\n        lastRemote = this.remote;\n\n    return new Ember.RSVP.Promise(function(resolve, reject){\n      if (lastRemote) {\n        service.close();\n      }\n\n      var remoteId = service.remoteIdGenerator.generate();\n\n      var pendingRequestKey = PopupIdSerializer.serialize(remoteId);\n      localStorage.setItem(CURRENT_REQUEST_KEY, pendingRequestKey);\n\n\n      service.openRemote(url, pendingRequestKey, options);\n      service.schedulePolling();\n\n      var onbeforeunload = window.onbeforeunload;\n      window.onbeforeunload = function() {\n        if (typeof onbeforeunload === 'function') {\n          onbeforeunload();\n        }\n        service.close();\n      };\n\n      if (service.remote && !service.remote.closed) {\n        service.remote.focus();\n      } else {\n        reject(new Error(\n          'remote could not open or was closed'));\n        return;\n      }\n\n      service.one('didClose', function(){\n        var pendingRequestKey = localStorage.getItem(CURRENT_REQUEST_KEY);\n        if (pendingRequestKey) {\n          localStorage.removeItem(pendingRequestKey);\n          localStorage.removeItem(CURRENT_REQUEST_KEY);\n        }\n        // If we don't receive a message before the timeout, we fail. Normally,\n        // the message will be received and the window will close immediately.\n        service.timeout = Ember.run.later(service, function() {\n          reject(new Error(\"remote was closed, authorization was denied, or a authentication message otherwise not received before the window closed.\"));\n        }, 100);\n      });\n\n      Ember.$(window).on('storage.torii', function(event){\n        var storageEvent = event.originalEvent;\n\n        var remoteIdFromEvent = PopupIdSerializer.deserialize(storageEvent.key);\n        if (remoteId === remoteIdFromEvent){\n          var data = parseMessage(storageEvent.newValue, keys);\n          localStorage.removeItem(storageEvent.key);\n          Ember.run(function() {\n            resolve(data);\n          });\n        }\n      });\n\n\n    }).finally(function(){\n      // didClose will reject this same promise, but it has already resolved.\n      service.close();\n\n      Ember.$(window).off('storage.torii');\n    });\n  },\n\n  close: function(){\n    if (this.remote) {\n      this.closeRemote();\n      this.remote = null;\n      this.trigger('didClose');\n    }\n    this.cleanUp();\n  },\n\n  cleanUp: function(){\n    this.clearTimeout();\n  },\n\n\n  schedulePolling: function(){\n    this.polling = Ember.run.later(this, function(){\n      this.pollRemote();\n      this.schedulePolling();\n    }, 35);\n  },\n\n  // Clear the timeout, in case it hasn't fired.\n  clearTimeout: function(){\n    Ember.run.cancel(this.timeout);\n    this.timeout = null;\n  },\n\n  stopPolling: on('didClose', function(){\n    Ember.run.cancel(this.polling);\n  })\n\n\n\n});\n\nexport default ServicesMixin;\n","/home/travis/build/npmtest/node-npmtest-torii/node_modules/torii/addon/providers/azure-ad-oauth2.js":"import Oauth2 from 'torii/providers/oauth2-code';\nimport {configurable} from 'torii/configuration';\n\nvar computed = Ember.computed;\n\n/**\n * This class implements authentication against AzureAD\n * using the OAuth2 authorization flow in a popup window.\n * @class\n */\nvar AzureAdOauth2 = Oauth2.extend({\n  name: 'azure-ad-oauth2',\n\n  baseUrl: computed(function() {\n    return 'https://login.windows.net/' + this.get('tennantId') + '/oauth2/authorize';\n  }),\n\n  tennantId: configurable('tennantId', 'common'),\n\n  // additional url params that this provider requires\n  requiredUrlParams: ['api-version', 'client_id'],\n\n  optionalUrlParams: ['scope', 'nonce', 'response_mode'],\n\n  responseMode: configurable('responseMode', null),\n\n  responseParams: computed(function () {\n    return [ this.get('responseType'), 'state' ];\n  }),\n\n  apiVersion: '1.0',\n\n  responseType: configurable('responseType', 'code'),\n\n  redirectUri: configurable('redirectUri', function azureRedirectUri(){\n    // A hack that allows redirectUri to be configurable\n    // but default to the superclass\n    return this._super();\n  })\n});\n\nexport default AzureAdOauth2;\n","/home/travis/build/npmtest/node-npmtest-torii/node_modules/torii/addon/providers/base.js":"import requiredProperty from 'torii/lib/required-property';\nimport { getOwner } from 'torii/lib/container-utils';\nimport { configurable } from 'torii/configuration';\nimport configuration from 'torii/configuration';\n\nvar DEFAULT_REMOTE_SERVICE_NAME = 'popup';\n\nvar computed = Ember.computed;\n\n/**\n * The base class for all torii providers\n * @class BaseProvider\n */\nvar Base = Ember.Object.extend({\n\n /**\n  * The name of the provider\n  * @property {string} name\n  */\n  name: requiredProperty(),\n\n  /**\n   * The name of the configuration property\n   * that holds config information for this provider.\n   * @property {string} configNamespace\n   */\n  configNamespace: computed('name', function() {\n    return 'providers.'+this.get('name');\n  }),\n\n  popup: computed('configuredRemoteServiceName', function() {\n    var owner = getOwner(this);\n    var remoteServiceName = (\n      this.get('configuredRemoteServiceName') ||\n      configuration.remoteServiceName ||\n      DEFAULT_REMOTE_SERVICE_NAME\n    );\n    return owner.lookup('torii-service:'+remoteServiceName);\n  }),\n\n  configuredRemoteServiceName: configurable('remoteServiceName', null)\n});\n\nexport default Base;\n","/home/travis/build/npmtest/node-npmtest-torii/node_modules/torii/addon/providers/edmodo-connect.js":"import Oauth2Bearer from 'torii/providers/oauth2-bearer';\nimport {configurable} from 'torii/configuration';\n\n/*\n* This class implements authentication against Edmodo\n* with the token flow. For more information see\n* https://developers.edmodo.com/edmodo-connect/docs/#connecting-your-application\n* */\nexport default Oauth2Bearer.extend({\n  name: 'edmodo-connect',\n  baseUrl: 'https://api.edmodo.com/oauth/authorize',\n  responseParams: ['access_token'],\n\n  /* Configurable parameters */\n  redirectUri: configurable('redirectUri'),\n  // See https://developers.edmodo.com/edmodo-connect/docs/#connecting-your-application for the full list of scopes\n  scope: configurable('scope', 'basic')\n});\n","/home/travis/build/npmtest/node-npmtest-torii/node_modules/torii/addon/providers/facebook-connect.js":"/* global FB, $ */\n\n/**\n * This class implements authentication against facebook\n * connect using the Facebook SDK.\n */\n\nimport Provider from 'torii/providers/base';\nimport {configurable} from 'torii/configuration';\n\nvar on = Ember.on;\nvar fbPromise;\n\nfunction fbLoad(settings){\n  if (fbPromise) { return fbPromise; }\n\n  var original = window.fbAsyncInit;\n  var locale = settings.locale;\n  delete settings.locale;\n  fbPromise = new Ember.RSVP.Promise(function(resolve, reject){\n    window.fbAsyncInit = function(){\n      FB.init(settings);\n      Ember.run(null, resolve);\n    };\n    $.getScript('//connect.facebook.net/' + locale + '/sdk.js');\n  }).then(function(){\n    window.fbAsyncInit = original;\n    if (window.fbAsyncInit) {\n      window.fbAsyncInit.hasRun = true;\n      window.fbAsyncInit();\n    }\n  });\n\n  return fbPromise;\n}\n\nfunction fbLogin(scope, returnScopes, authType){\n  return new Ember.RSVP.Promise(function(resolve, reject){\n    FB.login(function(response){\n      if (response.authResponse) {\n        Ember.run(null, resolve, response.authResponse);\n      } else {\n        Ember.run(null, reject, response.status);\n      }\n    }, { scope: scope, return_scopes: returnScopes, auth_type: authType });\n  });\n}\n\nfunction fbNormalize(response){\n  var normalized = {\n    userId: response.userID,\n    accessToken: response.accessToken,\n    expiresIn: response.expiresIn\n  };\n  if (response.grantedScopes) {\n    normalized.grantedScopes = response.grantedScopes;\n  }\n  return normalized;\n}\n\nvar Facebook = Provider.extend({\n\n  // Facebook connect SDK settings:\n  name:  'facebook-connect',\n  scope: configurable('scope', 'email'),\n  returnScopes: configurable('returnScopes', false),\n  appId: configurable('appId'),\n  version: configurable('version', 'v2.2'),\n  xfbml: configurable('xfbml', false),\n  channelUrl: configurable('channelUrl', null),\n  locale: configurable('locale', 'en_US'),\n\n  // API:\n  //\n  open: function(options){\n    if (options === undefined) options = {};\n    var scope = this.get('scope');\n    var authType = options.authType;\n    var returnScopes = this.get('returnScopes');\n\n    return fbLoad( this.settings() )\n      .then(function(){\n        return fbLogin(scope, returnScopes, authType);\n      })\n      .then(fbNormalize);\n  },\n\n  settings: function(){\n    return {\n      status: true,\n      cookie: true,\n      xfbml: this.get('xfbml'),\n      version: this.get('version'),\n      appId: this.get('appId'),\n      channelUrl: this.get('channelUrl'),\n      locale: this.get('locale')\n    };\n  },\n\n  // Load Facebook's script eagerly, so that the window.open\n  // in FB.login will be part of the same JS frame as the\n  // click itself.\n  loadFbLogin: on('init', function(){\n    fbLoad( this.settings() );\n  })\n\n});\n\nexport default Facebook;\n","/home/travis/build/npmtest/node-npmtest-torii/node_modules/torii/addon/providers/facebook-oauth2.js":"import {configurable} from 'torii/configuration';\nimport Oauth2 from 'torii/providers/oauth2-code';\n\nexport default Oauth2.extend({\n  name:    'facebook-oauth2',\n  baseUrl: 'https://www.facebook.com/dialog/oauth',\n\n  // Additional url params that this provider requires\n  requiredUrlParams: ['display'],\n\n  responseParams: ['code', 'state'],\n\n  scope:        configurable('scope', 'email'),\n\n  display: 'popup',\n  redirectUri: configurable('redirectUri', function(){\n    // A hack that allows redirectUri to be configurable\n    // but default to the superclass\n    return this._super();\n  }),\n\n  open: function() {\n    return this._super().then(function(authData){\n      if (authData.authorizationCode && authData.authorizationCode === '200') {\n        // indication that the user hit 'cancel', not 'ok'\n        throw new Error('User canceled authorization');\n      }\n\n      return authData;\n    });\n  }\n});\n","/home/travis/build/npmtest/node-npmtest-torii/node_modules/torii/addon/providers/github-oauth2.js":"import Oauth2 from 'torii/providers/oauth2-code';\nimport {configurable} from 'torii/configuration';\n\n/**\n * This class implements authentication against Github\n * using the OAuth2 authorization flow in a popup window.\n * @class\n */\nvar GithubOauth2 = Oauth2.extend({\n  name:       'github-oauth2',\n  baseUrl:    'https://github.com/login/oauth/authorize',\n\n  responseParams: ['code', 'state'],\n\n  redirectUri: configurable('redirectUri', function(){\n    // A hack that allows redirectUri to be configurable\n    // but default to the superclass\n    return this._super();\n  })\n});\n\nexport default GithubOauth2;\n","/home/travis/build/npmtest/node-npmtest-torii/node_modules/torii/addon/providers/google-oauth2-bearer.js":"/**\n * This class implements authentication against google\n * using the client-side OAuth2 authorization flow in a popup window.\n */\n\nimport Oauth2Bearer from 'torii/providers/oauth2-bearer';\nimport {configurable} from 'torii/configuration';\n\nvar GoogleOauth2Bearer = Oauth2Bearer.extend({\n\n  name:    'google-oauth2-bearer',\n  baseUrl: 'https://accounts.google.com/o/oauth2/auth',\n\n  // additional params that this provider requires\n  optionalUrlParams: ['scope', 'request_visible_actions'],\n\n  requestVisibleActions: configurable('requestVisibleActions', ''),\n\n  responseParams: ['access_token'],\n\n  scope: configurable('scope', 'email'),\n\n  redirectUri: configurable('redirectUri',\n                            'http://localhost:4200/oauth2callback')\n});\n\nexport default GoogleOauth2Bearer;\n","/home/travis/build/npmtest/node-npmtest-torii/node_modules/torii/addon/providers/google-oauth2.js":"/**\n * This class implements authentication against google\n * using the OAuth2 authorization flow in a popup window.\n */\n\nimport Oauth2 from 'torii/providers/oauth2-code';\nimport {configurable} from 'torii/configuration';\n\nvar GoogleOauth2 = Oauth2.extend({\n\n  name:    'google-oauth2',\n  baseUrl: 'https://accounts.google.com/o/oauth2/auth',\n\n  // additional params that this provider requires\n  optionalUrlParams: ['scope', 'request_visible_actions', 'access_type', 'approval_prompt', 'hd'],\n\n  requestVisibleActions: configurable('requestVisibleActions', ''),\n\n  accessType: configurable('accessType', ''),\n\n  responseParams: ['code', 'state'],\n\n  scope: configurable('scope', 'email'),\n\n  approvalPrompt: configurable('approvalPrompt', 'auto'),\n\n  redirectUri: configurable('redirectUri',\n                            'http://localhost:8000/oauth2callback'),\n\n  hd: configurable('hd', '')\n});\n\nexport default GoogleOauth2;\n","/home/travis/build/npmtest/node-npmtest-torii/node_modules/torii/addon/providers/linked-in-oauth2.js":"import Oauth2 from 'torii/providers/oauth2-code';\nimport {configurable} from 'torii/configuration';\n\n/**\n * This class implements authentication against Linked In\n * using the OAuth2 authorization flow in a popup window.\n *\n * @class LinkedInOauth2\n */\nvar LinkedInOauth2 = Oauth2.extend({\n  name:       'linked-in-oauth2',\n  baseUrl:    'https://www.linkedin.com/uas/oauth2/authorization',\n\n  responseParams: ['code', 'state'],\n\n  redirectUri: configurable('redirectUri', function(){\n    // A hack that allows redirectUri to be configurable\n    // but default to the superclass\n    return this._super();\n  })\n\n});\n\nexport default LinkedInOauth2;\n","/home/travis/build/npmtest/node-npmtest-torii/node_modules/torii/addon/providers/oauth1.js":"/*\n * This class implements authentication against an API\n * using the OAuth1.0a request token flow in a popup window.\n */\n\nimport Provider from 'torii/providers/base';\nimport {configurable} from 'torii/configuration';\nimport QueryString from 'torii/lib/query-string';\nimport requiredProperty from 'torii/lib/required-property';\n\nvar Oauth1 = Provider.extend({\n  name: 'oauth1',\n\n  requestTokenUri: configurable('requestTokenUri'),\n\n  buildRequestTokenUrl: function(){\n    return this.get('requestTokenUri');\n  },\n\n  open: function(options){\n    var name        = this.get('name'),\n        url         = this.buildRequestTokenUrl();\n\n    return this.get('popup').open(url, ['code'], options).then(function(authData){\n      authData.provider = name;\n      return authData;\n    });\n  }\n});\n\nexport default Oauth1;\n","/home/travis/build/npmtest/node-npmtest-torii/node_modules/torii/addon/providers/oauth2-bearer.js":"import Provider from 'torii/providers/oauth2-code';\n\nvar Oauth2Bearer = Provider.extend({\n  responseType: 'token',\n\n  /**\n   * @method open\n   * @return {Promise<object>} If the authorization attempt is a success,\n   * the promise will resolve an object containing the following keys:\n   *   - authorizationToken: The `token` from the 3rd-party provider\n   *   - provider: The name of the provider (i.e., google-oauth2)\n   *   - redirectUri: The redirect uri (some server-side exchange flows require this)\n   * If there was an error or the user either canceled the authorization or\n   * closed the popup window, the promise rejects.\n   */\n  open: function(options){\n    var name        = this.get('name'),\n        url         = this.buildUrl(),\n        redirectUri = this.get('redirectUri'),\n        responseParams = this.get('responseParams');\n\n    return this.get('popup').open(url, responseParams, options).then(function(authData){\n      var missingResponseParams = [];\n\n      responseParams.forEach(function(param){\n        if (authData[param] === undefined) {\n          missingResponseParams.push(param);\n        }\n      });\n\n      if (missingResponseParams.length){\n        throw new Error(\"The response from the provider is missing \" +\n              \"these required response params: \" + missingResponseParams.join(', '));\n      }\n\n      return {\n        authorizationToken: authData,\n        provider: name,\n        redirectUri: redirectUri\n      };\n    });\n  }\n});\n\nexport default Oauth2Bearer;\n","/home/travis/build/npmtest/node-npmtest-torii/node_modules/torii/addon/providers/oauth2-code.js":"import Provider from 'torii/providers/base';\nimport {configurable} from 'torii/configuration';\nimport QueryString from 'torii/lib/query-string';\nimport requiredProperty from 'torii/lib/required-property';\nimport randomUrlSafe from 'torii/lib/random-url-safe';\n\nvar computed = Ember.computed;\n\nfunction currentUrl(){\n  return [window.location.protocol,\n          \"//\",\n          window.location.host,\n          window.location.pathname].join('');\n}\n\n/**\n * Implements authorization against an OAuth2 API\n * using the OAuth2 authorization flow in a popup window.\n *\n * Subclasses should extend this class and define the following properties:\n *   - requiredUrlParams: If there are additional required params\n *   - optionalUrlParams: If there are additional optional params\n *   - name: The name used in the configuration `providers` key\n *   - baseUrl: The base url for OAuth2 code-based flow at the 3rd-party\n *\n *   If there are any additional required or optional url params,\n *   include default values for them (if appropriate).\n *\n * @class Oauth2Provider\n */\nvar Oauth2 = Provider.extend({\n  concatenatedProperties: ['requiredUrlParams','optionalUrlParams'],\n\n  /**\n   * The parameters that must be included as query params in the 3rd-party provider's url that we build.\n   * These properties are in the format that should be in the URL (i.e.,\n   * usually underscored), but they are looked up as camelCased properties\n   * on the instance of this provider. For example, if the 'client_id' is\n   * a required url param, when building the URL we look up the value of\n   * the 'clientId' (camel-cased) property and put it in the URL as\n   * 'client_id=' + this.get('clientId')\n   * Subclasses can add additional required url params.\n   *\n   * @property {array} requiredUrlParams\n   */\n  requiredUrlParams: ['response_type', 'client_id', 'redirect_uri', 'state'],\n\n  /**\n   * Parameters that may be included in the 3rd-party provider's url that we build.\n   * Subclasses can add additional optional url params.\n   *\n   * @property {array} optionalUrlParams\n   */\n  optionalUrlParams: ['scope'],\n\n  /**\n   * The base url for the 3rd-party provider's OAuth2 flow (example: 'https://github.com/login/oauth/authorize')\n   *\n   * @property {string} baseUrl\n   */\n  baseUrl:      requiredProperty(),\n\n  /**\n   * The apiKey (sometimes called app id) that identifies the registered application at the 3rd-party provider\n   *\n   * @property {string} apiKey\n   */\n  apiKey:       configurable('apiKey'),\n\n  scope:        configurable('scope', null),\n  clientId:     configurable('clientId', function () { return this.get('apiKey'); }),\n\n  state:        configurable('state', function () { return this.get('randomState'); }),\n\n  _randomState: null,\n  randomState: computed('_randomState', function() {\n    var state = this.get('_randomState');\n\n    if (!state) {\n      state = randomUrlSafe(16);\n      this.set('_randomState', state);\n    }\n\n    return state;\n  }),\n\n  /**\n   * The oauth response type we expect from the third party provider. Hardcoded to 'code' for oauth2-code flows\n   * @property {string} responseType\n   */\n  responseType: 'code',\n\n /**\n  * List of parameters that we expect\n  * to see in the query params that the 3rd-party provider appends to\n  * our `redirectUri` after the user confirms/denies authorization.\n  * If any of these parameters are missing, the OAuth attempt is considered\n  * to have failed (usually this is due to the user hitting the 'cancel' button)\n  *\n  * @property {array} responseParams\n  */\n  responseParams: requiredProperty(),\n\n  redirectUri: computed(function defaultRedirectUri(){\n    return currentUrl();\n  }),\n\n  buildQueryString: function(){\n    var requiredParams = this.get('requiredUrlParams'),\n        optionalParams = this.get('optionalUrlParams');\n\n    var qs = QueryString.create({\n      provider: this,\n      requiredParams: requiredParams,\n      optionalParams: optionalParams\n    });\n    return qs.toString();\n  },\n\n  buildUrl: function(){\n    var base = this.get('baseUrl'),\n        qs   = this.buildQueryString();\n\n    return [base, qs].join('?');\n  },\n\n  /**\n   * @method open\n   * @return {Promise<object>} If the authorization attempt is a success,\n   * the promise will resolve an object containing the following keys:\n   *   - authorizationCode: The `code` from the 3rd-party provider\n   *   - provider: The name of the provider (i.e., google-oauth2)\n   *   - redirectUri: The redirect uri (some server-side exchange flows require this)\n   * If there was an error or the user either canceled the authorization or\n   * closed the popup window, the promise rejects.\n   */\n  open: function(options){\n    var name        = this.get('name'),\n        url         = this.buildUrl(),\n        redirectUri = this.get('redirectUri'),\n        responseParams = this.get('responseParams'),\n        responseType = this.get('responseType'),\n        state = this.get('state'),\n        shouldCheckState = responseParams.indexOf('state') !== -1;\n\n    return this.get('popup').open(url, responseParams, options).then(function(authData){\n      var missingResponseParams = [];\n\n      responseParams.forEach(function(param){\n        if (authData[param] === undefined) {\n          missingResponseParams.push(param);\n        }\n      });\n\n      if (missingResponseParams.length){\n        throw new Error(\"The response from the provider is missing \" +\n              \"these required response params: \" + missingResponseParams.join(', '));\n      }\n\n      if (shouldCheckState && authData.state !== state) {\n        throw new Error('The response from the provider has an incorrect ' +\n                        'session state param: should be \"' + state + '\", ' +\n                        'but is \"' + authData.state + '\"');\n      }\n\n      return {\n        authorizationCode: authData[responseType],\n        provider: name,\n        redirectUri: redirectUri\n      };\n    });\n  }\n});\n\nexport default Oauth2;\n","/home/travis/build/npmtest/node-npmtest-torii/node_modules/torii/addon/providers/stripe-connect.js":"import Oauth2 from 'torii/providers/oauth2-code';\nimport {configurable} from 'torii/configuration';\n\nexport default Oauth2.extend({\n  name:       'stripe-connect',\n  baseUrl:    'https://connect.stripe.com/oauth/authorize',\n\n  // additional url params that this provider requires\n  requiredUrlParams: [],\n  optionalUrlParams: ['stripe_landing', 'always_prompt'],\n\n  responseParams: ['code', 'state'],\n\n  scope: configurable('scope', 'read_write'),\n  stripeLanding: configurable('stripeLanding', ''),\n  alwaysPrompt: configurable('alwaysPrompt', 'false'),\n\n  redirectUri: configurable('redirectUri', function() {\n    // A hack that allows redirectUri to be configurable\n    // but default to the superclass\n    return this._super();\n  })\n});\n","/home/travis/build/npmtest/node-npmtest-torii/node_modules/torii/addon/providers/twitter-oauth1.js":"import Oauth1Provider from 'torii/providers/oauth1';\n\nexport default Oauth1Provider.extend({\n  name: 'twitter'\n});\n","/home/travis/build/npmtest/node-npmtest-torii/node_modules/torii/addon/routing/application-route-mixin.js":"import { getConfiguration } from 'torii/configuration';\n\nexport default Ember.Mixin.create({\n  beforeModel: function (transition) {\n    var route = this;\n    var superBefore = this._super.apply(this, arguments);\n    if (superBefore && superBefore.then) {\n      return superBefore.then(function() {\n        return route.checkLogin(transition);\n      });\n    } else {\n      return route.checkLogin(transition);\n    }\n  },\n  checkLogin: function () {\n    let configuration = getConfiguration();\n    return this.get(configuration.sessionServiceName).fetch()\n      .catch(function(){\n        // no-op, cause no session is ok\n      });\n  }\n});\n","/home/travis/build/npmtest/node-npmtest-torii/node_modules/torii/addon/routing/authenticated-route-mixin.js":"import { getConfiguration } from 'torii/configuration';\n\nexport default Ember.Mixin.create({\n  beforeModel: function (transition) {\n    var route = this;\n    var superBefore = this._super.apply(this, arguments);\n    if (superBefore && superBefore.then) {\n      return superBefore.then(function() {\n        return route.authenticate(transition);\n      });\n    } else {\n      return route.authenticate(transition);\n    }\n  },\n  authenticate: function (transition) {\n    var configuration = getConfiguration();\n    var route = this,\n      session = this.get(configuration.sessionServiceName),\n      isAuthenticated = this.get(configuration.sessionServiceName + '.isAuthenticated'),\n      hasAttemptedAuth = isAuthenticated !== undefined;\n\n    if (!isAuthenticated) {\n      session.attemptedTransition = transition;\n\n      if (hasAttemptedAuth) {\n        return route.accessDenied(transition);\n      } else {\n        return session.fetch()\n          .catch(function() {\n            return route.accessDenied(transition);\n          });\n      }\n    } else {\n      // no-op; cause the user is already authenticated\n      return Ember.RSVP.resolve();\n    }\n  },\n  accessDenied: function (transition) {\n    transition.send('accessDenied', transition);\n  }\n});\n","/home/travis/build/npmtest/node-npmtest-torii/node_modules/torii/addon/services/iframe.js":"import UiServiceMixin from 'torii/mixins/ui-service-mixin';\nimport UUIDGenerator from 'torii/lib/uuid-generator';\n\nvar on = Ember.on;\n\nvar Iframe = Ember.Object.extend(Ember.Evented, UiServiceMixin, {\n\n  openRemote: function(url, pendingRequestKey, options){\n    this.remote = Ember.$('<iframe src=\"'+url+'\" id=\"torii-iframe\"></iframe>');\n    var iframeParent = '.torii-iframe-placeholder';\n    Ember.$(iframeParent).append(this.remote);\n  },\n\n  closeRemote: function(){\n    this.remote.remove();\n  },\n\n  pollRemote: function(){\n    if (Ember.$('#torii-iframe').length === 0) {\n      this.trigger('didClose');\n    }\n  }\n\n});\n\nexport default Iframe;\n","/home/travis/build/npmtest/node-npmtest-torii/node_modules/torii/addon/services/popup.js":"import UiServiceMixin from 'torii/mixins/ui-service-mixin';\nimport UUIDGenerator from 'torii/lib/uuid-generator';\n\nvar on = Ember.on;\n\nfunction stringifyOptions(options){\n  var optionsStrings = [];\n  for (var key in options) {\n    if (options.hasOwnProperty(key)) {\n      var value;\n      switch (options[key]) {\n        case true:\n          value = '1';\n          break;\n        case false:\n          value = '0';\n          break;\n        default:\n          value = options[key];\n      }\n      optionsStrings.push(\n        key+\"=\"+value\n      );\n    }\n  }\n  return optionsStrings.join(',');\n}\n\nfunction prepareOptions(options){\n  var width = options.width || 500,\n      height = options.height || 500;\n  return Ember.$.extend({\n    left: ((screen.width / 2) - (width / 2)),\n    top: ((screen.height / 2) - (height / 2)),\n    width: width,\n    height: height\n  }, options);\n}\n\nvar Popup = Ember.Object.extend(Ember.Evented, UiServiceMixin, {\n\n  // Open a popup window.\n  openRemote: function(url, pendingRequestKey, options){\n    var optionsString = stringifyOptions(prepareOptions(options || {}));\n    this.remote = window.open(url, pendingRequestKey, optionsString);\n  },\n\n  closeRemote: function(){\n  },\n\n  pollRemote: function(){\n    if (!this.remote) {\n      return;\n    }\n    if (this.remote.closed) {\n      this.trigger('didClose');\n    }\n  }\n\n});\n\nexport default Popup;\n","/home/travis/build/npmtest/node-npmtest-torii/node_modules/torii/addon/services/torii-session.js":"import createStateMachine from 'torii/session/state-machine';\nimport { getOwner } from 'torii/lib/container-utils';\n\nvar computed = Ember.computed;\nvar on = Ember.on;\n\nfunction lookupAdapter(container, authenticationType){\n  var adapter = container.lookup('torii-adapter:'+authenticationType);\n  if (!adapter) {\n    adapter = container.lookup('torii-adapter:application');\n  }\n  return adapter;\n}\n\nexport default Ember.Service.extend(Ember._ProxyMixin, {\n  state: null,\n\n  stateMachine: computed(function(){\n    return createStateMachine(this);\n  }),\n\n  setupStateProxy: on('init', function(){\n    var sm    = this.get('stateMachine'),\n        proxy = this;\n    sm.on('didTransition', function(){\n      proxy.set('content', sm.state);\n      proxy.set('currentStateName', sm.currentStateName);\n    });\n  }),\n\n  // Make these properties one-way.\n  setUnknownProperty() {},\n\n  open: function(provider, options){\n    var owner     = getOwner(this),\n        torii     = this.get('torii'),\n        sm        = this.get('stateMachine');\n\n    return new Ember.RSVP.Promise(function(resolve){\n      sm.send('startOpen');\n      resolve();\n    }).then(function(){\n      return torii.open(provider, options);\n    }).then(function(authorization){\n      var adapter = lookupAdapter(\n        owner, provider\n      );\n\n      return adapter.open(authorization);\n    }).then(function(user){\n      sm.send('finishOpen', user);\n      return user;\n    }).catch(function(error){\n      sm.send('failOpen', error);\n      return Ember.RSVP.reject(error);\n    });\n  },\n\n  fetch: function(provider, options){\n    var owner     = getOwner(this),\n        sm        = this.get('stateMachine');\n\n    return new Ember.RSVP.Promise(function(resolve){\n      sm.send('startFetch');\n      resolve();\n    }).then(function(){\n      var adapter = lookupAdapter(\n        owner, provider\n      );\n\n      return adapter.fetch(options);\n    }).then(function(data){\n      sm.send('finishFetch', data);\n      return;\n    }).catch(function(error){\n      sm.send('failFetch', error);\n      return Ember.RSVP.reject(error);\n    });\n  },\n\n  close: function(provider, options){\n    var owner     = getOwner(this),\n        sm        = this.get('stateMachine');\n\n    return new Ember.RSVP.Promise(function(resolve){\n      sm.send('startClose');\n      resolve();\n    }).then(function(){\n      var adapter = lookupAdapter(owner, provider);\n      return adapter.close(options);\n    }).then(function(){\n      sm.send('finishClose');\n    }).catch(function(error){\n      sm.send('failClose', error);\n      return Ember.RSVP.reject(error);\n    });\n  }\n});\n","/home/travis/build/npmtest/node-npmtest-torii/node_modules/torii/app/initializers/initialize-torii-callback.js":"import RedirectHandler from 'torii/redirect-handler';\n\nexport default {\n  name: 'torii-callback',\n  before: 'torii',\n  initialize: function(application) {\n    if (arguments[1]) { // Ember < 2.1\n      application = arguments[1];\n    }\n    application.deferReadiness();\n    RedirectHandler.handle(window).catch(function(){\n      application.advanceReadiness();\n    });\n  }\n};\n","/home/travis/build/npmtest/node-npmtest-torii/node_modules/torii/app/initializers/initialize-torii.js":"import bootstrapTorii from 'torii/bootstrap/torii';\nimport {configure} from 'torii/configuration';\nimport config from '../config/environment';\n \n\nvar initializer = {\n  name: 'torii',\n  initialize: function(application) {\n    if (arguments[1]) { // Ember < 2.1\n      application = arguments[1];\n    }\n    configure(config.torii || {});\n    bootstrapTorii(application);\n    application.inject('route', 'torii', 'service:torii');\n  }\n};\n\nexport default initializer;\n","/home/travis/build/npmtest/node-npmtest-torii/node_modules/torii/app/initializers/initialize-torii-session.js":"import bootstrapSession from 'torii/bootstrap/session';\nimport { getConfiguration } from 'torii/configuration';\n\nexport default {\n  name: 'torii-session',\n  after: 'torii',\n\n  initialize: function(application) {\n    if (arguments[1]) { // Ember < 2.1\n      application = arguments[1];\n    }\n    const configuration = getConfiguration();\n    if (!configuration.sessionServiceName) {\n      return;\n    }\n\n    bootstrapSession(application, configuration.sessionServiceName);\n\n    var sessionFactoryName = 'service:' + configuration.sessionServiceName;\n    application.inject('adapter', configuration.sessionServiceName, sessionFactoryName);\n  }\n};\n","/home/travis/build/npmtest/node-npmtest-torii/node_modules/torii/app/instance-initializers/setup-routes.js":"import bootstrapRouting from 'torii/bootstrap/routing';\nimport { getConfiguration } from 'torii/configuration';\nimport \"torii/router-dsl-ext\";\n\nexport default {\n  name: 'torii-setup-routes',\n  initialize: function(applicationInstance, registry){\n    const configuration = getConfiguration();\n\n    if (!configuration.sessionServiceName) {\n      return;\n    }\n\n    var router = applicationInstance.get('router');\n    var setupRoutes = function(){\n      var authenticatedRoutes = router.router.authenticatedRoutes;\n      var hasAuthenticatedRoutes = !Ember.isEmpty(authenticatedRoutes);\n      if (hasAuthenticatedRoutes) {\n        bootstrapRouting(applicationInstance, authenticatedRoutes);\n      }\n      router.off('willTransition', setupRoutes);\n    };\n    router.on('willTransition', setupRoutes);\n  }\n};\n","/home/travis/build/npmtest/node-npmtest-torii/node_modules/torii/app/instance-initializers/walk-providers.js":"import { lookup } from 'torii/lib/container-utils';\nimport { getConfiguration } from 'torii/configuration';\n\nexport default {\n  name: 'torii-walk-providers',\n  initialize: function(applicationInstance){\n    let configuration = getConfiguration();\n    // Walk all configured providers and eagerly instantiate\n    // them. This gives providers with initialization side effects\n    // like facebook-connect a chance to load up assets.\n    for (var key in configuration.providers) {\n      if (configuration.providers.hasOwnProperty(key)) {\n        lookup(applicationInstance, 'torii-provider:'+key);\n      }\n    }\n  }\n};\n"}